规则: 带E(extended)开头的一般表示32位寄存器, 不带E开头的一般表示16位. 一般是直接在16位寄存器之上再加16位而来.

<通用寄存器>
AX(Accumulator: 累加寄存器)(X(extend)表示由原来的8位扩展到16位, 下同):
	作用: 通常用来进行计算.
	可拆分为:
		AL: AX的低8位, 下C,D,B同.
		AH: AX的高8位, 下C,D,B同.
		
CX(Count: 计数寄存器):
	作用: 通常用来累加计数, 控制循环次数.
	
DX(Data: 数据寄存器):
	作用: 存放需要用的数据, 如乘除运算时的操作数等.
	
BX(Base: 基址寄存器):
	作用: 通常用作存储器指针.
	
SP(stack pointer: 栈指针寄存器):
	作用: 通常存放当前堆栈段的栈顶地址.
	注: SP, BP, SI, DI不可像AX一样拆分成AL, AH来用, 一定要拆分只能先MOV到AX再做拆分.
	
BP(base pointer: 基址指针寄存器):
	作用: 通常存放堆栈段中一个数据区的基址的偏移量, 初始时通常指向当前堆栈帧的基地址.
	
SI(source index: 源变址寄存器):
	作用: 通常用于存储源操作数的地址或偏移量.
	
DI(destination index: 目的变址寄存器):
	作用: 通常用于存储目标操作数的地址或偏移量.
	注: 一般配合SI进行字符串的赋值比较搜索等操作, 以及数据的批量传输等功能, 类似双指针算法.
</通用寄存器>

<段寄存器>
	CS(code segment: 代码段):
		作用: 存放代码段的段基址, 配合IP(在下面)使用从内存中读指令.
	
	DS(data segment: 数据段):
		作用: 存放数据段的段基址.
		
	SS(stack segment: 堆栈段):
		作用: 存放堆栈段的段基址. 配合SP(在上面)使用可访问堆栈段的栈顶堆栈帧, 配合BP(在上面)使用可访问整个堆栈段的数据.
			
	ES(Extra Segment:)16位, FS(Additional Segment), GS(General Segment): 
		作用: 这些寄存器是额外的数据段寄存器, 用于指向附加的数据段.
</段寄存器>

Flag(标志位寄存器):
	作用: 用于记录最近一次算术或逻辑运算的结果标志, 以及一些与处理器执行状态相关的信息.
			每次算术运算, 逻辑运算, 比较操作, 位操作等过程中都会更新对应标志位.
	各个位标志:
		0: Carry Flag(CF): 进位标志位, 用于指示最近一次算术运算是否产生了进位(或借位)
		1: Parity Flag(PF): 奇偶校验标志位, 用于指示最近一次运算结果中包含的“1”位的个数是否为偶数
		2: Reserved(保留位): 该位保留, 不被使用
		3: Adjust Flag(AF): 辅助进位标志位, 用于指示最近一次算术运算是否产生了进位到低 4 位的进位
		4: Zero Flag(ZF): 零标志位, 用于指示最近一次运算的结果是否为零
		5: Sign Flag(SF): 符号标志位, 用于指示最近一次运算结果的符号
		6: Trap Flag(TF): 陷阱标志位, 用于单步执行指令调试时使用
		7: Interrupt Enable Flag (IF): 中断使能标志位, 用于控制处理器对中断的响应
		8: Direction Flag (DF): 方向标志位, 用于控制字符串操作的方向
		9: Overflow Flag (OF): 溢出标志位, 用于指示最近一次有符号运算是否产生了溢出
		10-15: Reserved(保留位): 这些位保留, 不被使用

IP(instruction pointer: 指令指针寄存器):
	作用: 记录下一条需要执行的指令位于内存的哪个位置(CS指向的段的偏移量), 每执行一条指令就会自动累加
			, 保证一直指向下一条指令所在的内存地址. 
	用法: 只能用JMP指令赋值.
	机制: 
		1.JMP CS:IP时是far模式, JMP IP是near模式. 
		2.每次JMP的目标地址段如果不是可执行的代码, 而是TSS的话, CPU不会执行改写IP和CS的操作
			, 而是将指令理解为任务切换. CPU会切换到目标TSS所指定的任务.

TR(task register: 任务寄存器):
	作用: 记录当前正在运行哪一个任务, 进行任务切换时也会自动变化. 每次赋值时需要等于GDT编号乘以8.
	用法: 只能用LTR指令赋值.


<32位寄存器>
CR0(control register 0: 控制寄存器0)(32位!):
	作用: 非常重要, 只有操作系统可以操作它, 控制很多CPU的操作逻辑. 控制实模式和保护模式(虚模式).
	各个位控制的功能:
		0(Protected Mode Enable(PE)): 切换实模式和保护模式. 0为实模式(real address mode), 1为保护模式(protected virtual address mode).
		1(Monitor Coprocessor(MP)): 被设置为 1 时, 处理器在初始化过程中检测到了数学协处理器(FPU), 并且支持FPU指令.
		2(Emulation(EM)): 是否启用数学协处理器的仿真模式, 1为启用, 即在没有实际的数学协处理器硬件的情况下模拟数学协处理器的功能.
		3(Task Switched(TS)): 设置为 1 时, 表示处理器执行了任务切换. 这个位由处理器硬件自动设置和清除.
		4(Extension Type(ET)): 用于区分处理器的浮点数处理方式. 
								被设置为1时, 表示处理器支持Intel 387浮点数协处理器指令集;
								被设置为0时, 支持 Intel 287 浮点数协处理器指令集.
		5(Numeric Error(NE)): 表示处理器是否启用内部浮点数错误报告, 1为启用.
		6-15(Reserved): 这些位保留, 未被使用.
		16(Write Protect(WP)): 被设置为 1 时, 表示启用页面写保护, 禁止特权级别为 0 的程序修改页面目录和页面表.
		18(Alignment Mask(AM)): 用于控制内存访问的对齐方式. 被设置为 1 时, 处理器执行内存访问时会进行对齐检查.
		29(Not Write Through(NW)): 被设置为 1 时, 表示启用缓存写回(Write-Back)方式, 禁止缓存写透(Write-Through)方式.
		30(Cache Disable(CD)): 被设置为 1 时, 表示禁用处理器缓存.
		31(Paging(PG)): 是否使用分页机制. 0为不使用, 1为使用. 分页机制, 即处理器将虚拟地址转换为物理地址的机制.
</32位寄存器>
