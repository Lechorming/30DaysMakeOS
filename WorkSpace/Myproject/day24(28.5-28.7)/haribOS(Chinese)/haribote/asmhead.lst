     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [INSTRSET "i486p"]				; 要使用486的指令的声明
     5 00000000                                 
     6 00000000                                 ; 画面设定
     7  = 00000107                              VBEMODE EQU		0x0107			; VBE(VESA-BIOS扩展)的1024*768*8位色彩画面模式
     8 00000000                                 ; (画面模式一览)
     9 00000000                                 ;	0x100 :  640 *  400 * 8bit
    10 00000000                                 ;	0x101 :  640 *  480 * 8bit
    11 00000000                                 ;	0x103 :  800 *  600 * 8bit
    12 00000000                                 ;	0x105 : 1024 *  768 * 8bit
    13 00000000                                 ;	0x107 : 1280 * 1024 * 8bit
    14 00000000                                 
    15  = 00280000                              BOTPAK	EQU		0x00280000		; bootpack要复制到的内存地址
    16  = 00100000                              DSKCAC	EQU		0x00100000		; 磁盘中的数据要复制到的内存地址
    17  = 00008000                              DSKCAC0	EQU		0x00008000		; 磁盘中的数据被IPL加载到的内存地址（实模式）
    18 00000000                                 
    19 00000000                                 ; BOOT_INFO的地址信息
    20  = 00000FF0                              CYLS	EQU		0x0ff0			; IPL加载了多少个柱面到内存0x8200中的所在地址
    21  = 00000FF1                              LEDS	EQU		0x0ff1			; 键盘的LED灯状态的地址
    22  = 00000FF2                              VMODE	EQU		0x0ff2			; 颜色位数的所在地址
    23  = 00000FF4                              SCRNX	EQU		0x0ff4			; 分辨率的X的所在地址
    24  = 00000FF6                              SCRNY	EQU		0x0ff6			; 分辨率的Y的所在地址
    25  = 00000FF8                              VRAM	EQU		0x0ff8			; 图像缓冲区的开始地址
    26 00000000                                 
    27                                          		ORG		0xc200			; 告诉编译器程序在内存中的起始地址，后面要取标号的时候编译器会加上该偏移量
    28 0000C200                                 
    29 0000C200                                 ; 检查是否兼容VBE
    30 0000C200                                 
    31 0000C200 B8 9000                         		MOV		AX,0x9000
    32 0000C203 8E C0                           		MOV		ES,AX
    33 0000C205 BF 0000                         		MOV		DI,0
    34 0000C208 B8 4F00                         		MOV		AX,0x4f00
    35 0000C20B CD 10                           		INT		0x10
    36 0000C20D 3D 004F                         		CMP		AX,0x004f
    37 0000C210 75 5B                           		JNE		scrn320			; 不兼容只能用320*200*8bit画面模式
    38 0000C212                                 
    39 0000C212                                 ; 检查VBE的版本
    40 0000C212                                 
    41 0000C212 26 8B 45 04                     		MOV		AX,[ES:DI+4]
    42 0000C216 3D 0200                         		CMP		AX,0x0200
    43 0000C219 72 52                           		JB		scrn320			; if (AX < 0x0200) goto scrn320
    44 0000C21B                                 
    45 0000C21B 26 8B 45 04                     		MOV		AX,[ES:DI+4]
    46 0000C21F 3D 0200                         		CMP		AX,0x0200
    47 0000C222 72 49                           		JB		scrn320			; if (AX < 0x0200) goto scrn320
    48 0000C224                                 
    49 0000C224                                 ; 取得画面模式信息
    50 0000C224                                 
    51 0000C224 B9 0107                                 MOV     CX, VBEMODE		; 画面模式
    52 0000C227 B8 4F01                                 MOV     AX,0x4f01		; 使用VBE
    53 0000C22A CD 10                                   INT     0x10			; 调用显卡中断
    54 0000C22C 3D 004F                                 CMP     AX,0x004f		; 检查结果是否为0x004f
    55 0000C22F 75 3C                                   JNE     scrn320			; 不等于则只能使用320p
    56 0000C231                                 
    57 0000C231                                 ; 画面模式信息的确认
    58 0000C231 26 80 7D 19 08                          CMP      BYTE [ES:DI+0x19],8	; 检查颜色数是否为8
    59 0000C236 75 35                                   JNE      scrn320
    60 0000C238 26 80 7D 1B 04                          CMP      BYTE [ES:DI+0x1b],4	; 检查是否为调色板模式
    61 0000C23D 75 2E                                   JNE      scrn320
    62 0000C23F 26 8B 05                                MOV      AX, [ES:DI+0x00]		; 检查画面模式号码可否加上0x4000再进行指定
    63 0000C242 25 0080                                 AND      AX,0x0080
    64 0000C245 74 26                                   JZ       scrn320				; 模式属性的bit7是0的话就放弃
    65 0000C247                                 
    66 0000C247                                 ; 画面模式的切换
    67 0000C247                                 
    68 0000C247 BB 4107                         		MOV		BX, VBEMODE+0x4000
    69 0000C24A B8 4F02                         		MOV		AX,0x4f02
    70 0000C24D CD 10                           		INT		0x10
    71 0000C24F C6 06 0FF2 08                   		MOV		BYTE [VMODE], 8		; 记下画面模式（参考C语言）
    72 0000C254 26 8B 45 12                     		MOV		AX, [ES:DI+0x12]
    73 0000C258 A3 0FF4                         		MOV		[SCRNX], AX			; 记录分辨率x到bootinfo
    74 0000C25B 26 8B 45 14                     		MOV		AX, [ES:DI+0x14]
    75 0000C25F A3 0FF6                         		MOV		[SCRNY], AX			; 记录分辨率y到bootinfo
    76 0000C262 66 26 8B 45 28                  		MOV		EAX, [ES:DI+0x28]
    77 0000C267 66 A3 0FF8                      		MOV		[VRAM], EAX			; 记录VRAM的内存地址到bootinfo
    78 0000C26B EB 20                           		JMP		keystatus			; 跳过下面的scrn320
    79 0000C26D                                 
    80 0000C26D                                 scrn320:
    81 0000C26D B0 13                           		MOV		AL,0x13				; VGA图、320x200x8bit彩色
    82 0000C26F B4 00                           		MOV		AH,0x00
    83 0000C271 CD 10                           		INT		0x10
    84 0000C273 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8		; 记下画面模式（参考C语言）
    85 0000C278 C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    86 0000C27E C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    87 0000C284 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    88 0000C28D                                 		
    89 0000C28D                                 ; 用BIOS取得键盘上各种LED指示灯的状态
    90 0000C28D                                 keystatus:
    91 0000C28D B4 02                           		MOV		AH,0x02
    92 0000C28F CD 16                           		INT		0x16 			; 键盘BIOS
    93 0000C291 A2 0FF1                         		MOV		[LEDS],AL
    94 0000C294                                 		
    95 0000C294                                 ; PIC关闭一切中断
    96 0000C294                                 ;   根据AT兼容机的规格，如果要初始化PIC，
    97 0000C294                                 ;   必须在CLI之前进行，否则有时会挂起。
    98 0000C294                                 ;   随后进行PIC的初始化。
    99 0000C294                                 
   100 0000C294 B0 FF                                   MOV		AL,0xff
   101 0000C296 E6 21                                   OUT		0x21,AL
   102 0000C298 90                                      NOP				         ; 如果连续执行OUT指令，有些机种会无法正常运行
   103 0000C299 E6 A1                                   OUT		0xa1,AL
   104 0000C29B                                         
   105 0000C29B FA                                      CLI				         ; 禁止CPU级别的中断
   106 0000C29C                                         
   107 0000C29C                                 ; 为了让CPU能访问1MB以上的内存，设定A20GATE
   108 0000C29C                                 
   109 0000C29C E8 00B5                         		CALL	waitkbdout
   110 0000C29F B0 D1                           		MOV		AL,0xd1
   111 0000C2A1 E6 64                           		OUT		0x64,AL
   112 0000C2A3 E8 00AE                         		CALL	waitkbdout
   113 0000C2A6 B0 DF                           		MOV		AL,0xdf			; enable A20
   114 0000C2A8 E6 60                           		OUT		0x60,AL
   115 0000C2AA E8 00A7                         		CALL	waitkbdout
   116 0000C2AD                                 
   117 0000C2AD                                 ; 切换保护模式
   118 0000C2AD                                 
   119 0000C2AD 0F 01 16 C39A                   		LGDT	[GDTR0]			; 设定临时GDT
   120 0000C2B2 0F 20 C0                        		MOV		EAX,CR0
   121 0000C2B5 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 设置31位为0（为了禁止分页）
   122 0000C2BB 66 83 C8 01                     		OR		EAX,0x00000001	; 设置0位为1（为了切换到保护模式）
   123 0000C2BF 0F 22 C0                        		MOV		CR0,EAX
   124 0000C2C2 EB 00                           		JMP		pipelineflush
   125 0000C2C4                                 		
   126 0000C2C4                                 pipelineflush:
   127 0000C2C4 B8 0008                         		MOV		AX,1*8			; 可读写的段 32位
   128 0000C2C7 8E D8                           		MOV		DS,AX
   129 0000C2C9 8E C0                           		MOV		ES,AX
   130 0000C2CB 8E E0                           		MOV		FS,AX
   131 0000C2CD 8E E8                           		MOV		GS,AX
   132 0000C2CF 8E D0                           		MOV		SS,AX
   133 0000C2D1                                 
   134 0000C2D1                                 ; bootpack的转送
   135 0000C2D1                                 ; 将bootpack地址(文件末尾)的数据复制到0x00280000地址处，长度为512KB
   136 0000C2D1 66 BE 0000C3A0                          MOV		ESI,bootpack	; 转送源
   137 0000C2D7 66 BF 00280000                          MOV		EDI,BOTPAK		; 转送目的地 BOTPAK=0x00280000 bootpack的加载位置
   138 0000C2DD 66 B9 00020000                          MOV		ECX,512*1024/4
   139 0000C2E3 E8 0077                                 CALL	memcpy
   140 0000C2E6                                 
   141 0000C2E6                                 ; 将IPL读进来在内存0x8000位置的数据复制到内存0x00100000位置去，长度180KB
   142 0000C2E6                                 
   143 0000C2E6                                 ; 首先从启动引导扇区开始
   144 0000C2E6                                 ; 将0x7c00地址的数据复制到0x00100000地址处，长度为512B
   145 0000C2E6 66 BE 00007C00                          MOV		ESI,0x7c00		; 转送源
   146 0000C2EC 66 BF 00100000                          MOV		EDI,DSKCAC		; 转送目的地 DSKCAC=0x00100000
   147 0000C2F2 66 B9 00000080                          MOV		ECX,512/4
   148 0000C2F8 E8 0062                                 CALL	memcpy
   149 0000C2FB                                 
   150 0000C2FB                                 ; 所有剩下的
   151 0000C2FB                                 ; 将0x00008200地址的数据复制到0x00100200地址处，长度为180KB-512B
   152 0000C2FB 66 BE 00008200                          MOV		ESI,DSKCAC0+512	; 转送源 DSKCAC0=0x00008000 表示磁盘缓存地址（实模式）
   153 0000C301 66 BF 00100200                          MOV		EDI,DSKCAC+512	; 转送目的地 DSKCAC0=0x00100000 表示磁盘缓存地址
   154 0000C307 66 B9 00000000                          MOV		ECX,0
   155 0000C30D 8A 0E 0FF0                              MOV		CL,BYTE [CYLS]
   156 0000C311 66 69 C9 00001200                       IMUL	ECX,512*18*2/4	; 从柱面数变换为字节数/4
   157 0000C318 66 81 E9 00000080                       SUB		ECX,512/4		; 减去IPL
   158 0000C31F E8 003B                                 CALL	memcpy
   159 0000C322                                         
   160 0000C322                                 ; 必须由asmhead来完成的工作，至此全部完毕
   161 0000C322                                 ; 以后就交由bootpack来完成
   162 0000C322                                 
   163 0000C322                                 ; bootpack的启动
   164 0000C322                                 ; 将bootpack.hrb的第0x10c8地址的数据复制到0x00310000地址，长度为4520B
   165 0000C322                                 ; 这部分数据是头文件里的数据
   166 0000C322 66 BB 00280000                  		MOV		EBX,BOTPAK		; BOTPAK=0x00280000
   167 0000C328 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   168 0000C32D 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   169 0000C331 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4; SHR:右移 EXC=0x11a8
   170 0000C335 74 10                           		JZ		skip			; 没有要转送的东西时
   171 0000C337 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 转送源
   172 0000C33C 66 01 DE                        		ADD		ESI,EBX
   173 0000C33F 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 转送目的地
   174 0000C344 E8 0016                         		CALL	memcpy
   175 0000C347                                 
   176 0000C347                                 ; 最后将0x310000代入到ESP里。
   177 0000C347                                 skip:
   178 0000C347 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 栈初始值
   179 0000C34C 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x1b	; 2*8:0x000001b是指第2个段的0x1b号地址，第2个段的基地址是0x280000，
   180 0000C354                                 								; 所以实际上是从0x28001b开始执行的，也就是bootpack.hrb的0x1b号地址。
   181 0000C354                                 
   182 0000C354                                 waitkbdout:
   183 0000C354 E4 64                           		IN		 AL,0x64
   184 0000C356 24 02                           		AND		 AL,0x02
   185 0000C358 E4 60                           		IN		 AL,0x60		; 空读(为了清空数据缓冲区中的垃圾数据，不会影响JNZ)
   186 0000C35A 75 F8                           		JNZ		waitkbdout		; 比较结果不为0则继续等待
   187 0000C35C C3                              		RET
   188 0000C35D                                 
   189 0000C35D                                 memcpy:
   190 0000C35D 67 66 8B 06                     		MOV		EAX,[ESI]
   191 0000C361 66 83 C6 04                     		ADD		ESI,4
   192 0000C365 67 66 89 07                     		MOV		[EDI],EAX
   193 0000C369 66 83 C7 04                     		ADD		EDI,4
   194 0000C36D 66 83 E9 01                     		SUB		ECX,1
   195 0000C371 75 EA                           		JNZ		memcpy			; 比较结果不为0则继续复制
   196 0000C373 C3                              		RET
   197 0000C374                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   198 0000C374                                 
   199 0000C374 00 00 00 00 00 00 00 00 00 00   		ALIGNB	16								; 一直添加DBO,直到地址能被16整除为止,猜测是为了4字节对齐
       0000C37E 00 00 
   200 0000C380                                 GDT0:
   201 0000C380 00 00 00 00 00 00 00 00         		RESB	8								; NULL selector
   202 0000C388 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf		; 可以读写的段（segment）32bit
   203 0000C390 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047		; 可以执行的段（segment）32bit（bootpack用）
   204 0000C398                                 
   205 0000C398 0000                            		DW		0
   206 0000C39A                                 GDTR0:
   207 0000C39A 0017                            		DW		8*3-1
   208 0000C39C 0000C380                        		DD		GDT0
   209 0000C3A0                                 
   210 0000C3A0                                 		ALIGNB	16
   211 0000C3A0                                 bootpack:
